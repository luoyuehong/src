# mail roundrobin type，ex：normal、weighted
mail.roundrobin.type=weighted
# file tmp path
file.folder=D://temp

# jpa配置
spring.jpa.database=h2
# 指定DDL mode (none, validate, update, create, create-drop). 当使用内嵌数据库时，默认是create-drop，否则为none.
# ddl-auto:create----每次运行该程序，没有表格会新建表格，表内有数据会清空
# ddl-auto:create-drop----每次程序结束的时候会清空表
# ddl-auto:update----每次运行程序，没有表格会新建表格，表内有数据不会清空，只会更新
# ddl-auto:validate----运行程序会校验数据与数据库的字段类型是否相同，不同会报错
spring.jpa.hibernate.ddl-auto=update
# 是否打印执行sql
spring.jpa.show-sql=true
# 是否开启JPA支持，默认为: true
spring.data.jpa.repositories.enabled=true
# 指定目标数据库的类型
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
# 是否在启动时初始化schema，默认为false
spring.jpa.generate-ddl=true
# h2配置
# url有以下几种形式:
# jdbc:h2:file:E:*/database 会持久化到磁盘文件，但是是单连接
# jdbc:h2:tcp://IP/database 通过远程连接的方式
# jdbc:h2:mem:database 直接在内存中，程序只要重启就会消失
spring.datasource.url=jdbc:h2:file:./h2/mms
spring.datasource.driver-class-name=org.h2.Driver
spring.datasource.type=com.alibaba.druid.pool.DruidDataSource
spring.datasource.username=sa
spring.datasource.password=
# 程序启动后会初始化这些脚本文件
#spring.datasource.schema=classpath:db/schema.sql
#spring.datasource.data=classpath:db/data.sql
# h2 web console启用/关闭
spring.h2.console.enabled=true
# 配置为true后，h2 web console就可以在远程访问了。否则只能在本机访问
spring.h2.console.settings.web-allow-others=false
# h2 web console访问path
spring.h2.console.path=/h2-console

# 上传文件大小
# 单个文件最大值
spring.servlet.multipart.max-request-size=10MB
spring.servlet.multipart.max-file-size=10MB